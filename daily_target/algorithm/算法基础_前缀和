前缀和主要用在求连续子数组的合上 加快查询效率
通过预先构建一个前缀和数组pre_num
pre_num[0] = array[0]
pre_num[1] = array[0] + array[1]
.......................
pre_num[n] = array[0]+array[1]+........array[n];
-----------------------------
或者pre_num[i] = pre_num[i-1] + array[i]

这样就可以快速的求出一个区间范围内存的子数组之和了
如下例子
//前缀和 的使用
#include<stdio.h>
#include<stdlib.h>
#include<unistd.h>

int
main( int argc, char* argv[] ) { 
    int p[5] = {-100, 3, -1, 4, 1000};
    int pre_sum[5] = {0,0,0,0, 0}; 
    pre_sum[0] = p[0];
    for ( int i = 1; i < 5; ++i ) { 
        pre_sum[i] = pre_sum[i-1] + p[i];
    }   

    printf( "from index 1 to 3 sum:%d\n", pre_sum[3] - pre_sum[1-1]);
    printf( "from index 2 to 4 sum:%d\n", pre_sum[4] - pre_sum[2-1]);
    return 0;
}

root@instance-u1n6fu49:~/algorithm/prefix_sum# ./main 
from index 1 to 3 sum:6
from index 2 to 4 sum:1003

所以主要提高了连续子数组和的查询效率
