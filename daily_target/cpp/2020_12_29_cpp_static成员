什么是static成员?
  是与类相关而不是与成员相关，即每个成员都能访问但是又不用在每个成员内存区域分配额外的空间来保存这个值
  比如银行的利率 这个就可以直接放到类上面 而不用每个贷款对象都去保存一个利率
  对象不包含任何与静态数据成员相关的数据，同时静态成员函数也不与任何对象绑定在一起 在静态成员函数中也不包含this指针.作为结果静态成员函数不能声明为const的!
   不能声明为const的原因在于静态成员函数不包含this指针 也就不存在成员数据的修改！一般来说成员函数声明为const 就是希望成员数据不被修改!
   
因为静态成员不属于类的任何一个对象，所以他们并不是在创建类对象的时候被定义的。所以我们不能在类的内部初始化静态成员。相反的必须在类的外部定义和初始化每个静态成员.
就有点类似全局变量，因此一旦它被定义，就一直存在于程序的整个生命周期中
  1 #include<string>           
  2 class Account {            
  3     public:                
  4         void calculate() { amount = amount + interestRate; }
  5         static double Rate() { return interestRate; } 
  6         static void Rate( double );     
  7     private:
  8         std::string owner;
  9         double amount;
 10         static double interestRate;     
 11         static double initRate;
 12 };
 13 
 14 double Account::interestRate = 1.0; //所以需要在类外部进行定义和初始化interestRate静态成员
 15 
 16 int
 17 main( int argc, char* argv[] ) {
 18     double r;
 19     r = Account::Rate();
 20     Rate();//main.cpp:20:2: error: ‘Rate’ was not declared in this scope 说明它是在Account类作用范围内的 就跟string属于std一样一样的
 21     return 0;
 22 }
 
 16 int
 17 main( int argc, char* argv[] ) {
 18     double r;
 19     r = Account::Rate();
 20     r = interestRate; //编译报错 main.cpp:20:6: error: ‘interestRate’ was not declared in this scope
 21     return 0;
 22 }
   
   虽然类不属于任何成员 但是可以通过成员对象 指针或者引用进行访问静态变量,并且成员函数内部也不需要使用作用域限定符访问
  
1 #include<string>
  2 class Account {
  3     public:
  4         void calculate() { amount = amount + interestRate; }
  5         static double Rate() { return interestRate; }
  6         static void Rate( double );
  7     private:
  8         std::string owner;
  9         double amount;
 10         static constexpr double interestRate = 1.0; 常量表达式可以在类内部进行初始化 因为是常量值最终会去到常量区
 11         static double initRate;
 12 };

const和constexpr的区别在于constexpr要求能够在编译期间就能够算出来
而const只保证了在运行期间不被修改
