 红黑树 是一种更为普遍的平衡二叉树
有如下定义
1. 所有节点不是红色就是黑色
2. 根节点是黑色
3. 如果一个节点为红色 那么他的子结点必定为黑色
4. 根节点到任意叶子节点所经过的路径上的黑色结点数量相同
5. 新增结点必定为红色结点

红黑色的左旋和右旋
左旋:
当前结点A是红色 当前父结点B是红色，叔叔结点C为黑色 且当前结点为右子树时 进行左旋
所谓的左旋 就是把当前结点A提升为父结点 把前父结点B降低为新父结点A的左子树 且新父结点A的左子树变成 旧父结点B的右子树
然后就是考虑变色问题

右旋:
当前结点A是红色 且当前结点B是红色，叔叔结点C为黑色， 祖父结点D 且当前结点为左子树 进行右旋
所谓的右旋 就是把父结点B提升为祖父结点 原祖父结点D变成了当前父结点B的右子树
然后就是考虑变色问题

经过总结发现 红黑树的左旋 是针对 关注结点(或者可能是新插入结点)及其父结点 左旋增加深度
           而红黑树的右旋是针对关注结点的父结点和祖父结点 右旋减少深度

思考题 为何stl容器底层都是选用的是红黑树而非平衡二叉树

那是因为平衡二叉树是绝对的平衡 保证任意结点的左右子树高度差不超过1 所有就有可能因为插入删除 牵一发而动全身 导致多次旋转和调整 来达到平衡

而红黑树 则是通过颜色规则来维持一个相对的平衡 对于插入删除导致的颜色不平衡问题 一般来说通过最多通过三次旋转和变色就可以保持平衡 影响范围较小 所以性能更优

这也是红黑树和平衡二叉树的区别
