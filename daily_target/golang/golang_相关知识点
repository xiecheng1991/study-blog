结构体
      结构体指针也使用.访问数据成员 指针自动被解引用
      结构体指定字段名称初始化时 可以不按照声明顺序进行初始化
      如果是不指定字段名称初始化时 需要按照字段的声明顺序来
      未被赋值的字段会被初始化为对应的零值
 Go 支持为结构体类型定义方法(methods) 。
      就是声明一个接收者为结构体的函数
      struct st
      func ( t st ) member() {}
      
      func( t *st )member1(){}
调用方法时，Go 会自动处理值和指针之间的转换。 想要避免在调用方法时产生一个拷贝，或者想让方法可以修改接受结构体的值， 你都可以使用指针来调用方法
 ptr := &st
 ptr可以调用member方法和member1方法 st也可以调用member和member1方法
 接口 type **** interface
 接口和 指针方法与非指针方法
      指针方法 可以包含非指针方法 
      但是非指针方法 不能包含指针方法

结构体内嵌和匿名内嵌
      //结构体内嵌结构体相关知识
package main

import( "fmt" )
只要给结构体提供了String方法那么久可以直接通过fmt.Println进行打印
type Addr struct {
    province int 
    home int 
}

type Person struct {
    age int 
    Addr //匿名内嵌
}

func ( p Person ) String() string {
    return fmt.Sprintf( "age:%d, province:%d, home:%d", p.age, p.Addr.province, p.Addr.home )
}

func main() {
    var p Person = Person{ age:10, Addr:Addr{1, 1} }
    fmt.Println( p ) 
}

//输出结果如下
root@instance-u1n6fu49:~/go/test# go run struct.go 
age:10, province:1, home:1

通道选择器 select
      for i := 0; i < 2; i++ {
        select {
        case msg1 := <-c1:
            fmt.Println("received", msg1)
        case msg2 := <-c2:
            fmt.Println("received", msg2)
        }
    }
 for range 迭代通道(channel) {
      只有当ch被关闭 for range才会结束
 }
 
 非阻塞通道     
for i := 0; i < 2; i++ {
        select {
        case msg1 := <-c1:
            fmt.Println("received", msg1)
        case msg2 := <-c2:
            fmt.Println("received", msg2)
        }
        default:
            fmt.Println("no activity")
    }
    
 如果没有满足条件的case 就走default分支
 
 
 通道的关闭
 j, more := <- jobs
 如果jobs通道被关闭了 more将返回false
 这也是for range 迭代通道结束for循环的标记
 
 golang互斥锁
 var mutex = &sync.Mutex{}
 mutex.Lock()
 do something
 mutex.Unlock()
 
 接口相关
 package main

import (
    "fmt"
)

type Pet interface {
    Name() string
    Category() string
}

type Dog struct {
    name string // 名字。
}

func (dog *Dog) SetName(name string) {
    dog.name = name
}

func (dog Dog) Name() string {
    return dog.name
}

func (dog Dog) Category() string {
    return "dog"
}

func main() {
    // 示例1。
    dog := Dog{"little pig"}
    fmt.Printf("The dog's name is %q.\n", dog.Name())
    var pet Pet = dog //pet 是dog的一个拷贝
    dog.SetName("monster")
    fmt.Printf("The dog's name is %q.\n", dog.Name())
    fmt.Printf("This pet is a %s, the name is %q.\n",
        pet.Category(), pet.Name())
    fmt.Println()
    //上面的输出结果 说明用一个值初始化一个接口 是对那个值得拷贝
    The dog's name is "little pig".
    The dog's name is "monster".
    This pet is a dog, the name is "little pig".
    如果改成 var pet Pet = &dog
    The dog's name is "little pig".
    The dog's name is "monster".
    This pet is a dog, the name is "monster".

    // 示例2。
    dog1 := Dog{"little pig"}
    fmt.Printf("The name of first dog is %q.\n", dog1.Name())
    dog2 := dog1
    fmt.Printf("The name of second dog is %q.\n", dog2.Name())
    dog1.name = "monster"
    fmt.Printf("The name of first dog is %q.\n", dog1.Name())
    fmt.Printf("The name of second dog is %q.\n", dog2.Name())
    fmt.Println()

    // 示例3。
    dog = Dog{"little pig"}
    fmt.Printf("The dog's name is %q.\n", dog.Name())
    pet = &dog
    dog.SetName("monster")
    fmt.Printf("The dog's name is %q.\n", dog.Name())
    fmt.Printf("This pet is a %s, the name is %q.\n",
        pet.Category(), pet.Name())
}
