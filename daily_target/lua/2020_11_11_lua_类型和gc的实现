本来想研究lua table的 结果看源码却把我引导到了lua 类型的实现和gc的实现上
所有lua类型的底层都是
一 lua 类型源码实现 所以非gc类型 从lobject.h源码中看,lua所有类型底层都是一个枚举值
/*
 45 ** Union of all Lua values 
 46 */
 47 typedef union Value {      
 48   struct GCObject *gc;    /* collectable objects */
 49   void *p;         /* light userdata */
 50   lua_CFunction f; /* light C functions */
 51   lua_Integer i;   /* integer numbers */
 52   lua_Number n;    /* float numbers */
 53 } Value;                   
 54 
 55 
 56 /*
 57 ** Tagged Values. This is the basic representation of values in Lua:
 58 ** an actual value plus a tag with its type.
 59 */
 60 
 61 #define TValuefields    Value value_; lu_byte tt_
 62 
 63 typedef struct TValue {    
 64   TValuefields;            
 65 } TValue;
 看到union 先复习一下 union
 什么时候需要union?
 当多个数据需要共享内存或者多个数据每次只取其一时，可以利用联合体
 1) 联合体是一个结构
 2) 它的所有成员相对于基地址的偏移量都为0
 3）此结构空间要足够大到足够容纳最宽的成员
 4)其对齐方式要适合其中所有成员
 //例子
  1 #include<stdio.h>          
  2 #include<stdlib.h>         
  3 typedef union {            
  4     char s[7];
  5     int n;                 
  6     double d;
  7 } U;
  8 
  9 int
 10 main( int argc, char* argv[] ) {
 11     printf( "sizeof U:%d\n", sizeof( U ) ); 
 12     return 0;
 13 }
 通过编译执行得出 sizeof U:8
 解析s 7个字节 n 4个字节 double 8个字节 所以8个字节就能把所有的数据存完
 
 但是当
  3 typedef union {            
  4     char s[9];
  5     int n;                 
  6     double d;
  7 } U;
  8 s 9个字节 n 4个字节 double 8个字节 放不下s 所以补充到16个字节这样就既能被4整除又能被8整除
  
  再回到lua 类型当中来
  lua使用typedef struct TValue {    
 64   TValuefields;            
 65 } TValue; 作为类型底层比Value联合体多了个tt 用来标识这个变量的类型
 
 
 如果需要被gc管理的对象 就以gcobject指针形式保存 否则直接存值
 #define CommonHeader    struct GCObject *next; lu_byte tt; lu_byte marked
265 
266 
267 /* Common type for all collectable objects */
268 typedef struct GCObject {
269   CommonHeader;
270 } GCObject;

所有的gc 都包含一个CommonHeader对象 CommonHeader是一个宏 并且结合预编译文件得出
typedef struct GCObject {  
596   struct GCObject *next; lu_byte tt; lu_byte marked;                                                                                     
597 } GCObject; 
所以可以看出 GCObject 是一个单链表 用next指针把所有的需要gc管理的对象串联起来 并且用tt 保存类型 marked字段用来保存 标记清除工作

接下里看创建需要gc管理的对象
通过预编译lgc.c文件得出 创建gc对象的函数
GCObject *luaC_newobj (lua_State *L, int tt, size_t sz) {
2743   global_State *g = (L->l_G);
2744   GCObject *o = ((GCObject *)(luaM_malloc_(L, (sz), ((tt) & 0x0F))));
2745   o->marked = ((lu_byte)(((g)->currentwhite & ((1<<(3)) | (1<<(4))))));
2746   o->tt = tt;  //指定要垃圾回收对象的类型 table? upvalue? function?           
2747   o->next = g->allgc;     
2748   g->allgc = o;   //一直都逆序进去的（每次往头部插入） 最后一个创建的o对象就是g->allgc链表的头,所以可以得出整个lua中需要gc的对象都在g->allgc链表上
2749   return o;               
2750 }
通过luaM_malloc_创建了一个对象并且强制类型转换成GCObject* 类型 得到一个o

luaM_malloc_源码如下主要就是进行内存分配
1. void *luaM_malloc_ (lua_State *L, size_t size, int tag) {         
189   if (size == 0)
190     return NULL;  /* that's all */
191   else {
192     global_State *g = G(L);
193     void *newblock = firsttry(g, NULL, tag, size);                
194     if (unlikely(newblock == NULL)) {
195     ¦ newblock = tryagain(L, NULL, tag, size); //如果分配失败则会先执行一次full gc然后再执行一次内存分配
196     ¦ if (newblock == NULL)
197     ¦   luaM_error(L);                                            
198     }                                                             
199     g->GCdebt += size;   //记录已使用的内存                                         
200     return newblock; 
201   }
202 }


 
