每个lua虚拟机 对应一个lua_State结构体, 他用TValue数组来模拟栈，几个栈相关的成员
stack: 栈数组的起始位置
base:当前函数栈的基地址
top:当前栈的下一个可用位置
这些成员的初始化在stack_ini函数中完成
lua_state结构体

306 struct lua_State {         
307   CommonHeader;         //宏   
308   lu_byte status;          
309   lu_byte allowhook;       
310   unsigned short nci;  /* number of items in 'ci' list */
311   StkId top;  /* first free slot in the stack */
312   global_State *l_G;    //这个应该是全局g表   
313   CallInfo *ci;  /* call info for current function */ //执行函数时用CallInfo数据结构来表示函数相关信息，这个结构中同样有top base这两个栈相关的成员 无论函数怎么执行,有多少函数引用到的栈
都是lua虚拟机的栈
314   StkId stack_last;  /* last free slot in the stack */
315   StkId stack;  /* stack base */
316   UpVal *openupval;  /* list of open upvalues in this stack */                                                                           
317   GCObject *gclist;      //垃圾回收链表头结点  
318   struct lua_State *twups;  /* list of threads with open upvalues */
319   struct lua_longjmp *errorJmp;  /* current error recover point */
320   CallInfo base_ci;  /* CallInfo for first level (C calling Lua) */                                                                      
321   volatile lua_Hook hook;  
322   ptrdiff_t errfunc;  /* current error handling function (stack index) */ 函数调用时的出错处理函数
323   l_uint32 nCcalls;  /* number of allowed nested C calls - 'nci' */                                                                      
324   int oldpc;  /* last pc traced */
325   int stacksize;           
326   int basehookcount;       
327   int hookcount;           
328   volatile l_signalT hookmask;
329 };

lua_State中CallInfo ci和Callinfo base_ci的区别
base_ci是一个CallInfo数组，存储的是CallInfo的信息 而ci指向的是当前函数的CallInfo指针

在调用所有的函数之前，一般会调用luaD_precall函数，主要完成如下几步操作
1. 保存当前虚拟机执行指令savedpc到当前CallInfo的savedpc当中，此处保存这个指令的原因在于函数调用过后恢复执行
2. 分别计算出待调用函数的base,top值，这些值得计算依赖于函数的参数数量
3. 从lua_State的base_ci数组中分配一个新的CallInfo指针，存储前面两步计算出来的信息，切换到这个函数中准备调用。

*前后调用的函数中lua栈的大小是有限的,同时CallInfo数组的大小也是有限的，栈的使用和嵌套层次都不能过多，以防这些资源耗尽了

