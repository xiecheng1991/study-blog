lua 语言中协程的本质就是线程，我们可以认为协程时带有良好编程接口的线程，也可以认为线程是带有底层API的协程。

lua_State类型，它不仅表示一个Lua状态，还表示带有该状态的一个线程， 每个线程都有自己的堆栈和调用信息

所以创建一个线程的时候
lua_State* lua_newthread( lua_State* L )
该函数会将新的线程或者协程作为一个"thread"的值压入栈中,并返回一个表示该新线程的lua_State类型的指针
除了主线程以外 线程和其他lua对象一样都是垃圾回收的对象，当新创建的协程(在这一节中称为线程)会被压入栈中，这样保证了新线程不会被垃圾回收
创建了以后只是创建了一个空线程但是还没有入口函数
这就需要把L中的入口函数通过lua_xmove移动到L1中， 包括yield和resume参数的传递都是通过lua_xmove移动

协程的唤醒
int lua_resume ( lua_State * L, lua_State *from, int narg);
参数L 表示要唤醒的协程
参数from 表示执行resume函数的协程
narg 表示执行resume函数时传入的参数
