1. 如何在lua中表示一个C语言结构体?
  lua为这类任务提供了一个名为用户数据(userdata)的基本类型。用户数据为lua语言提供了可以用来存储任何数据的原始内存区域,没有预定义操作
  void* lua_newuserdata( lua_State* L, int size ); 函数lua_newuserdata分配一块指定大小的内存,然后将相应的用户数据压栈,并返回该块的内存地址,
  如果需要其他方法来分配内存，可以很容易的创建一个指针大小的用户数据并在其中存放指向真实内存地址的指针
  
  例子:
  static const struct luaL_Reg arraylib [] = {
    { "new", newarray },
    { "set", setarray },
    { "get", getarray },
    { "size", getsize },
    { NULL, NULL },
  }
  
  int luaopen_array( lua_State *L ) {
    luaL_newlib( L, arraylib );
    return 1;
  }
  
 以上的代码仔细分析
 local array = require "array" 会去查找cpath下的 array.so 然后找到luaopen_array
 在lua中
 local a = array.new() 创建一个userdata a
 array.set( a, 1, 1 ) 通过调用c库array的set方法把刚刚创建的userdata a 通过参数的形式传递进去
 
 所以可以看到上面除了newarray函数以外 其他函数都会有一个lua_touserdata函数的调用 来拿到在这个userdata a
 
 2. userdata的元表
  为什么需要元表？
   针对上面的用户 本来我们期望的是一个BoolArray类型的userdata 但是lua用户传递了一个io.stdin一个指向输出流的指针,array.set会认为他是一个合法的参数
    要区分不同类型的userdata，一种常用的方法就是为每种类型创建不同的元表，每次创建用户数据时，用相应的元表进行标记，每当获取用户数据时，检查其是否有正确的元表。由于lua代码不能改变用户数据的元表
    因此不能绕过这些检查
 和元表相关的函数
 int luaL_newmetatable( lua_State* L, const char* tname ); 创建一个元表并且以tname为键存放到注册表当中去
 int luaL_getmetatable( lua_State* L, const char* tname ); 从注册表中获取与tname关联的元表
 void* luaL_checkudata( lua_State* L, int index, const char* tname ) 会检查栈中指定位置的对象是否是与指定名称的元表相匹配的用户数据，或者该对象没有正确的元表,luaL_checkudata就会引发错误
 否则luaL_checkudata就返回这个用户数据地址
 重点来了 这个userdata可以有元表
 
 所以修改代码如下
 int luaopen_array( lua_State* L ) {
    luaL_newmetatable( L, "LuaBook.array" );
    luaL_newlib( L, arraylib );
 }
 
 static int newarray( lua_State* L ) {
    lua_newuserdata( L, sizeof( array ) );      创建一个大小为sizeof(array)的userdata
    luaL_getmetatable( L, "luaBook.array" );
    lua_setmetatable( L, -2 );
 }
 
 newarray后面的函数就需要使用 ( BitArray* ) luaL_checkudata( L, 1, "LuaBook.array" );
 调用方式还是array.set(a, 1, 1);
 
 3. 面向对象的访问
    userdata实现面向对象的机制和原理在于 由于用户数据没有键,所以Lua在每次访问的时候都会调用该元方法(在他有元表的情况下)
   所以修改代码如下
   newarray()函数不需要数组对象 所以只需要导出一个newarray()函数
   
   static const struct luaL_Reg arrayLib[] = {
      { "new", newarray },
      { NULL, NULL }
   }
   
   static const struct luaL_Reg arraylib_m [] = {
      { "set", setarray },
      { "get", getarray },
      { "size", getsize },
      { NULL, NULL }
   }
   
   int luaoen_array( lua_State* L ) {
      luaL_newmetatable( L, "LuaBook.array" ); //创建元表
      lua_pushvalue( L, -1 ); //复制这个元表 复制这个元表的原因在于__index要指向他自身
      lua_setfield( L, -2, "__index" ); //__index域指向"LuaBook.array"这个元表也就是他本身
      luaL_setfuncs( L, arraylib_m, 0 ); //用arraylib_m中的函数去填充LuaBook.array这个表 是用arraylib_m 填充栈顶的表
      luaL_newlib( L, arraylib ); //通过arrayLib函数填充一个新的库
      return 1;最后返回这个表
   }
   
   最后面向对象的访问
   local array = require "array"
   local a = array.new()
   a:set(1,1); //通过冒号调用 把a当作参数传递进去
   
 以上均是完全数据
 
 
 轻量级用户数据
 轻量级用户数据是一个代表C语言指针的值，即它是一个值而不是对象，所以无需创建他
 可以直接使用lua_pushlightuserdata将这个轻量级用户数据放入栈中
 他和完全用户数据的区别在于 他是指针而不是缓冲区，他们没有元表，并且不受垃圾收集器的管理
 
 
 还要考虑完全数据的垃圾收集!
 
