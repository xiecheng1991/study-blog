编译
dofile是运行lua代码的主要方式，但是dofile只是一个辅助函数 真正执行核心的是loadfile
loadfile只是从文件中加载代码段，但它不会运行代码，而只是编译，然后将编译好后的代码段封装到一个函数中返回
function dofile(filename)
  local f = assert( loadfile(filename) )
  return f
end
所以要多次运行一个文件则多执行几次loadfile的返回值

思考 热更新问题
可以多loadfile几次然后重新执行达到热更的目的，但是代码中一般都是以require的方式代码的加载

require 的方式加载文件 会先去package.loaded[filename]当中去检查 如果package.loaded[filename]不为nil则直接返回 否则就去preload找预先加载器  path和cpath路径下去找对应的文件

所以loadfile和dofile的主要区别在于
dofile编译并且执行 loadfile执行不执行 需要用户手动执行


load和loadfile的区别在于
如果调用失败 load和loadfiel都会返回一个错误信息和nil值
load是从一个文件或者函数中读取代码段
load(字符串) 会将该字符串封装到一个函数中进行返回
load( 函数 ) load会一直执行这个函数直到该函数返回nil

load (chunk [, chunkname [, mode [, env]]])
  如果chunk是字符串 return function() truck end
  如果chunk是函数 则调用这个函数
  chunkname 在错误消息和调试消息中指定代码块的名字
  mode 如果是"b" 则是二进制文本这个时候load不会返回  如果是"t"则是文本代码块 如果是bt则可以是文本也可以是二进制
  env 如果不指定则默认是全局表 否则就是指定的表,并且如果没有传全局表 在load( source )使用全局变量会找不到                                


预编译
  luac -o 目标文件名 源文件
  
错误
  因为lua语言是嵌入在应用程序中的扩展语言，所以当错误发生时并不能简单的崩溃退出,相反的是提供了错误处理方式
  error 通过error并传递一个错误信息来引发一个错误
  assert断言
  
错误处理
  1 --以下示例错误对象如果是个字符串,lua还会把一些错误发生的位置信息附上
  2 --local ok, err = pcall( function() error( { code = 1 } ) end)
  3 --[[
  4 local ok, err = pcall( function() error( "my error" ) end)
  5 print( err )               
  6 ]]--
  7 
  8 --因为pcall返回错误信息时,部分的调用栈已经被破坏了 所以拿不到发生错误时的完整函数调用栈信息
  9 
 10 --xpcall通过提供通过提供第二个参数(消息处理函数)，当发生错误时Lua会在调用栈展开前调用处理函数
 11 --所以通过搭配debug调试库来获取有关错误的更多信息
 12 --local ok, err = xpcall( function() error( "my error" ) end, debug.debug)
 13 --[[
 14 local ok, err = xpcall( function() error( "my error" ) end, debug.traceback)
 15 print( err )
 16 ]]--
