首先索引模型
1. hash索引 
  底层hash表 底层依赖于一个数组 把key通过hash函数转换成对应的index 然后对应Index上存放该数据
  优点:查询较快
    这个优点还是在hash表中数据较少的情况 随着数据增多冲突因子的变大 一般会产生hash冲突 这个时候可以采用 修改hash函数或者是增大内存(内存允许的情况下)来降低冲突因子
    如果修改hash函数和增大内存不好实现的话 就只有将hash里面修改为存储链表的形式 对于通过hash产生同一个关键字的数据则直接挂载到链表尾部， 如果某一列的链表长度过程 则还是说明hash函数有问题
    最后实在不行就只有在hash里面挂载一颗红黑树或者平衡二叉树，其实这个还不如直接用红黑树和平衡二叉树了
  缺点不支持范围查询 如果要查找一个范围内的数据只有把整个hash表遍历一遍
  所以比较适合等值查询
2. 数组索引
  优点 内存连续 支持随机访问 所以能够快速的定位和范围查询
  缺点 新增或作者删除时候操作比较麻烦 所以不适合更新频繁的数据
  比较适合等值查询和范围查询
3. 平衡二叉树和红黑树
  优点 因为都是二叉搜索树 所以支持等值查询和范围查询 也支持快速动态更新
  缺点 对于像数据库这种海量数据 构建一个平衡二叉树和红黑树的话 树的高度过高 磁盘i/o次数过多
所以数据库一般都采用b树系列作为数据库底层数据模型
InnoDB大概是的b+树索引 大概是1200个结点 当这棵树高为4的时候就可以存储1200的3次方个数据 所以查找一个值最多只需要三次磁盘i/o 因为根节点在内存中
其实跳表和b+树等很相似反而实现起来还更简单 还有LSM树

---------------------------------------------------------索引实战---------------------------------------------------------------------

