mysql 锁的主要目的
    处理并发问题,当出现并发访问的时候，数据库需要合理的控制资源的访问规则。
1. 全局锁
    顾名思义,全局锁就是对整个数据库实例加锁 命令为 Flush table with read lock,之后其他线程更新语句 创建表语句 和更新类的事务提交都将会被阻塞
    全局锁的典型使用场景是,做全库逻辑备份 也就是把整个表都select 出来存成文本
    缺点 
    如果主库做备份那么整库都只读 那么在备份期间都不能执行更新，所有业务就得停止
    如果从库上备份,那么备份期间从库不能执行主库同步过来的binlog,会导致主从延迟
    处理方法 如果数据库引擎支持可重复读事务的话 直接开启一个可重复读的事务 在事务开启时就拿到了那一刻的视图 这样就不会出现上面的问题了
    但是如果不支持事务比如myisam这种不支持事务的引擎 就必须得用FTWRL方式保证数据的一致性
    
    实例1 设置了读锁
    session A
    mysql> flush tables with read lock;
    Query OK, 0 rows affected (0.00 sec)
    
    session B
    mysql> insert into T values(600, 6, t6);
    ERROR 1223 (HY000): Can't execute the query because you have a conflicting read lock
    
    --释放全局锁
    session A
    mysql> unlock tables;
    Query OK, 0 rows affected (0.01 sec)
    
    session B
    mysql> insert into T values(600, 6, 't6');
    Query OK, 1 row affected (0.01 sec)
    
    
    set global readonly = true 和FWTWRL
    set global readonly = true 虽然他也可以让全库进入只读状态
    1. 在一些其他系统中,readonly的值会被用来做其他逻辑,比如判断是主库还是从库(从库不允许修改)，因此修改这个值影响比较大
    2. 在异常处理上有差异，如果FTWRL命令以后客户端打开连接那么MYSQL会自动释放这个全局锁，整个库回到可以正常的更新状态，但是readonly 则会导致数据库一直处于readonly状态
    所以综上两点 尽量使用FWTRL而少使用 set global readonly
    
    mysql 自带的备份工具是mysqldump, 当mysqldump使用参数-single-transaction的时候，导数据之前就会启动一个事务，来确保拿到一致性视图
    
2. 表级锁( 表锁,元数据锁 )
   表级锁的语法 lock tables 表名 read/write 与FWTRL类似 可以使用unlock tables主动释放锁，也可以在客户端断开的时候自动释放,lock tables语法除了会限制别的线程读写外，也限定了本线程接下里的操作对象
   
   元数据锁MDL
    不需要显示的使用 在访问一个表的时候会自动加上 MDL的作用是,保证读写锁的正确性
    当对一个表做增删改查的时候,加入一个MDL读锁,当要对表结构进行变更操作的时候，加MDL写锁
    读锁之间不互斥，因此你可以有多个线程同时增删改查
    读写之间互斥，写锁互斥，用来保证变更表结构操作的安全性。因此如果有两个线程要同时给一个表加字段，其中要等另外一个执行完成才能开始。
    
    事务中的MDL锁，在语句执行时开始申请，但是语句结束后并不会马上释放，而是会等到整个事务提交后再释放
