处于2msl状态的主机正常 2msl状态可以防止因为网络延迟导致使用相同连接上一次的网络包到达时引起的包序号错误问题,或者认为是本次连接的包
如果处于2msl状态的主机出现故障,它会在msl秒钟重启，并且在主机重启msl秒内是不能建立任何连接这就称为平静时间,还是为了避免网络中还存在上一次连接的包的问题

fin_wait2状态:
  当对方收到了本方的fin报文并且给予了ack回复时 本方进入fin_wait2状态 如果对方一直不发fin包则一直处于fin_wait2状态 对方也一直处于close_wait状态,并一直保存这个状态到
  应用程序决定进行关闭
rst复位报文段
产生复位报文(信号)常见条件
1. 当连接请求到达时,目的端口没有进程正在听 已重现
149145	14865.480577	10.0.18.104	106.12.158.133	TCP	66	49793 → 20000 [SYN] Seq=0 Win=8192 Len=0 MSS=1460 WS=256 SACK_PERM=1
149151	14865.526723	106.12.158.133	10.0.18.104	TCP	60	20000 → 49793 [RST, ACK] Seq=1 Ack=1 Win=0 Len=0
2. 异常终止一个连接
  终止一个连接的正常方式是发送一个fin,有时也称这个为有序发送 因为,在所有数据都已经发送完毕过后才发送fin,正常情况下没有任何数据丢失。但是也有可能发送一个复位报文段而不是fin来中途释放一个连接,这称为异常释放
  异常终止对应用程序来说有两个优点
  1. 丢弃任何待发数据并立即发送复位报文段
  2. rst接收方会区分另一端的执行是异常关闭还是正常关闭
3. 向一个已经关闭了的套接字发送数据也会引起reset(即某个已经关闭了的套接字收到了数据)也会产生reset
