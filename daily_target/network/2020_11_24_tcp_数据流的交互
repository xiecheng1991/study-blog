tcp 确认
一: 延时确认
就是将数据的发送和对方数据的确认合并到一起发送,这种技术称为延时的确认
对fin包的确认不会延迟发送

0.0                 bsdi.1023 > svr4.login: P 0:1(1) ack 1 win 4096
0.016497 (0. 0165)  svr4.login > bsdi.1023: P 1:2(1) ack 1 win 4096
0.139955 (0.1235)   bsdi.1023 > svr4.login: . ack 2 win 4096
分析 
第一行以序号0 发送数据
第二行将确认序号为1，也就是最后成功收到的序号加1 对其进行确认(也就是下一次期望数据的序号)，同时还发送了一个序号为1的数据(有数据发送的情况下就进行了延迟确认)
第三行通过将确认序号设置为2 来对服务器的回显进行确认

二: 延时确认的时间
  通常tcp在接收到数据过后并不立即发送ACK;相反,它推迟发送，以便将ACK与需要沿该方向发送的数据一起发送(有时也称为数据捎带ack),绝大多数实现采用的时延为200ms
  
 Nagle算法
 产生的原因 因为每次发送数据时都会产生40字节的额外数据 包含20字节的ip首部和20自己的tcp首部
 
 算法:
  要求在一个连接上 最多只能有一个未被确认的未完成小分组,在该分组的确认到达以前不能发送其他的小分组。相反tcp收集这些小分组。并在确认到达时以一个不分组的方式发送出去。该算法的优越
    之处在于他是自适应的确认到达的越快 数据也就发送得越快而在希望减少微小分组数目的低速广域网上，则会发送更少的分组
 关闭Nagle算法:
  为什么需要关闭Nagle算法 因为有些比较及时性的交互操作如果采用Nagle算法就会有很明显的延迟
  通过对套接字使用TCP_NODELAY选项来关闭
  
  窗口大小通告
  PSH 5:6(1) ack 47, win 4096
  PSH 47:48(1) ack 6, win 8192
  
  PSH 10:12(2) ack 52, win 4095
  此时告诉对方我的缓冲区窗口大小为4095 缓冲区中还有一个数据未读取
  
