丢包 乱序 重传
            cli                                                  svr
43                       P 6401:6657(256) ack 1                         
                           ack 6657                                     58(svr告诉发送端希望收到下一个报文段的起始序列号为6657)
45                       P 6657:6913(256) ack 1(丢失)                 
46                       P 6913:7169(256) ack 1                       因为不是期望的 起始序列号为6657 则将这256个字节的数据缓存起来
                           ack 6657                                  60 给发送方再次发送一个ack 6657
48                       P 7169:7425(256) ack 1                      同样的把这256个字节给缓存起来
50                       p 7425:7681(256) ack 1                       缓存这256字节
                            ack 6657
52                       p 7681:7937(256) ack 1                       缓存256字节
                            ack 6657
------------------------------------------------------------------------------------------
再收到三个重复的ack过后 就假定这个报文已经丢失 并重传自那个序号起的一个报文段
54                      p 6657:6913(256) ack 1(重传)                        
                           ack 7937                             这个时候它会把未确认的7937-6657(1280)字节一起确认了,但是窗口大小为 win-1280因为这1280个字节还没有机会读取
所以从上面又可以分析得出 tcp还有一个缓冲区 应用程序还有一个缓冲区 读取的时候其实是把tcp缓冲区的数据读到了应用程序缓冲区

拥塞避免算法
  慢启动算法是一个在连接上发起数据流的方法，但有时我们会达到中间路由器的极限，此时分组将会被丢弃。
  该算法假定由于分组受到损坏引起的丢失是非常少的，因此分组丢失就意味着在源主机和目的主机之间的某处网络上发生了拥塞，有以下两种丢失的指示
  1. 发生超时
  2. 受到重复的确认(就是上面的情况)
实际上慢启动算法和拥塞避免算法常常一起实现来处理网络拥塞的情况
慢启动算法 需要维护一个启动门限ssthresh
拥塞避免算法维护一个拥塞窗口cwnd
所以得到的算法过程如下
1) 对一个给定的连接初始化cwnd为1个报文段, ssthresh为65535个字节 实际上cwnd和ssthresh实际上都是以字节为单位进行维护的
2) TCP输出例程 不能超过cwnd和接收方窗口大小。拥塞避免是发送方使用的流量控制，而通告窗口则是接收方进行流量控制。前者是发送方感受到了网络拥塞的估计，而后者则与接收方在该连接上的可用缓存大小有关
3) 当拥塞发生(超时或者受到重复确认), ssthresh被设置为当前窗口大小的一半（cwnd 和 接收方窗口大小的最小值,但最少为两个报文段 )
   此外如果是超时引起了拥塞,则cwnd被设置为1个报文段(这就是慢启动)
4) 当新的数据被对方确认时,就增加cwnd,但增加的方法依赖于我们是否正在进行慢启动或拥塞避免。如果cwnd小于或等于ssthresh,则正进行慢启动，否则正在进行拥塞避免
   并且慢启动一直持续到我们回到当拥塞发生时所处位置的一般时才停止,然后转换为执行拥塞避免。
慢启动算法初始设置cwnd为1个报文，此后每收到一个确认cwnd就会翻倍 只有超时过后才会采用慢启动算法
拥塞避免算法 要求每次收到确认时将cwnd增加1/cwnd



