shell脚本
脚本格式
  #! /bin/bash
  echo "hello world"
  #! 是一个约定的标记 它告诉系统这个脚本需要什么解释器来执行
  echo 用于向窗口输出文本

脚本运行
  chmod +x test.sh 给脚本加可执行权限
  1.作为可执行程序 cd 到脚本目录 执行./test.sh
  2. 作为解释器参数 /bin/bash test.sh 这种写法就不需要#! /bin/bash 因为已经指定了解释器了
  
shell 变量
1. 定义变量
  your_name="runoob.com" 中间不能要空格且定义变量时 不需要$符号
  
2. 使用变量
  echo $your_name

3. 只读变量 使用readonly命令可以将变量设置为只读变量
  readonly your_name

4. 删除变量 使用unset命令可以删除变量
  unset your_name
  
5. 变量类型
  1) 局部变量 在脚本或者命令中定义，仅在当前shell中有效,其他shell 启动的程序不能访问
  2) 环境变量 所有的程序,包括shell启动的程序,都能访问环境变量,有些程序需要环境变量来保证其正常运行。必要时shell也可以定义环境变量
  3) shell变量 shell变量是由shell程序设置的特殊变量。shell变量中有一部分环境变量，有一部分是局部变量,这些变量保证了shell的正常运行
  
shell 字符串
  1. 单引号
    str='hello world'
  2. 双引号
    str = "Hello "%your_name""
    
 双引号和单引号的区别
 单引号字串中不能出现单独一个的单引号（对单引号使用转义符后也不行），但可成对出现，作为字符串拼接使用。
 
 获取字符串长度
 string="abcd"
 echo ${#string} #输出4
 
 提取子字符串
 string="runoob is a great site"
 #截取第2个到第4个字符 第一个值得索引为0
 echo ${string:1:4} #输出unoo
 
 查找子字符串
 查找字符i或者o的位置那个字母先出现就计算那个
 echo `expr index "$string" io` #输出4
 
 shell数组
  bash支持一维数组并且没有限定数组大小 数组元素从下标0开始
  1）数组的定义 在shell中用括号来表示数组，数组元素用"空格"分割开
    array=(value0 value1 value2 value3)
    或者
    array_name=(
      value0
      value1
      value2
      value3
    )
    还可以使用不连续的下标 并且下标的范围没有限制
    
  2) 读取数组
    valuen=${array_name[n]}
    使用@可以获取数组中所有元素
    echo ${array_name[@]}
    
  3) 获取数组长度
    与获取字符串长度是类似的
    length=${#array_name[@]} 或者 length=${#array_name[*]}
 
 shell注释
 1) 单行注释 前面#
 2) 多行注释 :<<! 也可以使用其他符号
 !
 
 shell参数传递
 ./test.sh param1 param2
 使用 $0 就是param1
 使用 $1 就是param2
 
 几个特殊字符
 $# 传递到脚本的参数个数
 $* 以一个单字符串显示所有向脚本传递的参数(单字符串) "$0 $1 $@"
 $$ 脚本运行的当前进程ID
 $! 后台运行的最后一个进程ID
 $@ 与$* 但是使用时加引号 并在引号中返回每个参数（多个字符串）"$0" "$1" "$@"
 $? 显示最后命令的退出状态
 $- 显示shell当前使用的当前选项与set命令相同
 
 shell 基本运算符
 expr
  expr是一款表达式计算工具，使用它能完成求值操作
  #!/bin/bash
  val=`expr 2 + 2`
  echo "两数之和为 : $val"
  两点注意
  1）完整的表达式和运算符之间要有空格 例如2+2是不对的 必须写成2 + 2
  2）完整的表达式要被``包含在这个字符在esc下边 不是单引号
  
 算数运算符 + - * / % == !=
  
 关系运算符
  -eq 检测两个数相等
  -ne 检测两个数不等
  -gt 检测左边大于右边
  -lt 检测左边小于右边
  -ge 检测左边是否大于等于右边
  -le 检测左边是否小于等于右边
  
 bool运算符
  ! 非运算
  -o 或运算 or 有一个表达式为 true 则返回 true。
  -a 与运算 and 两个表达式都为 true 才返回 true。
  
  逻辑运算
    && 等同于 -a
    || 等同于 -o
  
  字符串运算
  = 两个字符串是否相等
  != 检测是否不等
  -z 检测长度是否为0
  -n 检测长度是否不为0
  $ 检测字符串是否为空
  
  
shell流程控制
  if then
  fi
  
  if then
  elif then
  else then
  fi
  
  for循环
  for var in item1 item2...itemn
  do
  done
  
 例子:
 for str in "this is a test" "this is a"                                                                                                  
 do
      echo ${str}
      echo "-----"
 done
 this is a test
-----
this is a
-----
 
  
  while语句
  while condition 
  do
  
  done
  
  until循环 会一直执行到condition为true为止
  util condition
  do
    command
  done
  
  case 语句
  case 值 in
  模式1)
    command
  ;;
  模式2)
    command
  ;;
  esac
  
  跳出循环break continue
  
  shell函数
  []代表可选
  [function] funcname[()]
  {
    action;
    [return int]
  }
  说明
  1、可以带function fun() 定义，也可以直接fun() 定义,不带任何参数。
  2、参数返回，可以显示加：return 返回，如果不加，将以最后一条命令运行结果，作为返回值。 return后跟数值n(0-255
  
  函数参数
  funcparam 1 2 3 4 5 6 从左向右传递参数
  $1 第一个参数
  $2 第二个参数
  ....
  
  
  
 
  
  
    
  
  

