main函数
  所有的程序都是从main函数开始
进程的终止
  五种正常的方式终止
    a) 从main返回
    b) 调用exit
    c) 调用_exit或者_Exit
    d) 最后一个线程从启动例程返回
    e) 从最后一个线程调用pthread_exit
  三种异常的方式终止
    a) 调用abort
    b) 接收到一个信号
    c) 最后一个线程对取消请求作出响应
int atexit( void (*func)(void) ) 终止处理程序 这些函数将由exit自动调用
例子
  1 #include<unistd.h>         
  2 #include<stdio.h>          
  3 #include<stdlib.h>         
  4 
  5 void end() {
  6     printf( "at end\n" );
  7 }
  8 
  9 int
 10 main( int argc, char* argv[] ) {
 11     atexit( end );
 12     return 0;
 13 }
root@instance-u1n6fu49:~/linux/unix_env/proc_env# ./main 
at end

exit和_exit的区别 
_exit会直接结束并且不会调用任何善后处理
_Exit等同于_exit


命令行参数
  命令行参数是由exec启动程序 传递给main
  int main( int argc, char* argv[] ); argc指明传递的参数数量 argv保存了传递的参数 字符串数组

环境表
  每个程序都能接收到一张环境表,和参数表一样都是一个字符串数组,然后全局变量environ则包含了该指针数组的地址
  按照惯例name=value
  extern char** environ
  一般不直接使用 反而是用getenv和setenv函数
  
 C程序的存储空间布局
 1. 正文段 这是cpu执行的机器指令部分并且常常是只读的
 2. 初始化数据段 通常称为数据段，它保存了程序中需要明确的赋初始值的变量(全局变量)
 3. 未初始化数据段bss段，在程序开始执行之前，内核将此段中的数据初始化为0或空指针 例如函数外的声明 int sum[1000] 这个sum就是处于未初始化数据段bss段并且在程序开始之前被初始化成了0
 4. 栈区 主要是局部变量的存放
 5. 堆区 动态内存malloc calloc等等手动分配的内存
 
 
  
