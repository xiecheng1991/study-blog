进程标识(pid)
  进程标识是一个非负整数 用来标识一个唯一的进程,但是进程标识可复用,当一个进程终止以后其进程ID可以拿去标识其他进程
  大多数unix都采用延迟复用技术 这是为了避免 系统还在认为使用的是之前的进程而不是新进程

0号进程和1号进程以及2号进程
  0号进程是系统进程该进程是内核进程通常被称为交换进程，它并不会执行任何磁盘上的程序
  1号进程 init进程 在自举过程结束后由系统调用而产生的一个用户进程，但是它以超级用户特权运行 通常用于读取配置完成系统的初始化工作 启动一个unix系统
        init进程绝不会终止,因为它会成为所有孤儿进程的父进程
  所以实际上unix进程是一个树形结构
                   0号进程
                      |
                    1进程
  
  2号进程 页守护进程 此进程负责支持虚拟存储器系统的分页操作

fork 创建进程
  pid_t fork(void);
  该函数返回两次 因为父进程执行fork函数后面指令
  子进程返回0 这里的0不是代表进程号 那是因为0号进程是系统进程 并且每个进程有且只有一个唯一的父进程
  父进程返回子进程ID 那是因为一个父进程可以有多个子进程 所以才返回了进程ID
  
  fork了以后 子进程拷贝了父进程的内存空间 数据段(初始化和未初始化数据段(bss)) 堆区 栈区 但是他们共享正文段
  
  由于fork了以后 跟着exec执行程序 所以现在很多实现并不执行一个父进程的内存空间副本 而是采用写时复制技术 这些区域有父子进程共享
  并且内核将他们的访问权限改变为只读，如果父进程或者子进程视图修改这些区域，则内核只为修改区域的那块内存制作一个副本 通常是虚拟内存中的一个页
  简单总结 写时复制 就是说 子进程不再拷贝父进程的内存空间 反而和父进程共享一块区域 这个区域只读 只有在父子进程尝试修改时 内核就把这个区域进行一个拷贝 通常情况下是用了一个内存页
  为什么要共享内存区域?
    那是因为fork以后 操作系统要为子进程分配内存区域 并且拷贝父进程的内存区域
    但是通过写时复制 可以避免大量的拷贝  比如只有当子进程修改了那个内存区域过后  才用一个内存页来拷贝这些被改动过后的内存 然后让子进程引用到这个新的内存页
  所以无论是拷贝 还是写时复制 父子进程各自的修改都不会影响对方 而且他们是各自独立的进程!!
  
  fork后的执行顺序
  fork后是子进程先执行还是父进程先执行 这个顺序是不确定的 具体看内核的调度
  
  fork与带缓冲的i/o
      如果说在fork之前有数据到缓冲区中 如果fork了以后子进程复制了父进程的内存区域 包括缓冲区 所以就会导致 输出两次
      简单的说缓冲区也会被复制fork覆盖
      标准输出连接到终端设备，它是行缓冲的，遇到换行符刷新缓冲区!否则是全缓冲的
      程序正常退出一定会清空缓冲区并且将对应的数据写到文件中去
      
   fork与文件共享
      fork的一个特性是父进程所有被打开的文件描述符都被复制到子进程中，就好像执行了dup函数int dup( int fd ), 所以父子进程共享了一个文件表项
      也就是说父子进程任意一进程修改了文件的偏移量 彼此都会受影响
      文件表项
        内核维护了一个文件的长度等等信息 每个进程维护了一个指向该文件的文件表项(维护了文件的偏移量和文件大小)， 当程序进行写文件更新的时候如果当前文件表项的长度超过了原文件的长度时更新内核
        中文件的长度,而偏移量就是指定从文件中那个位置进行写入
        
  fork 失败的原因(可以通过errno查看)
     a) 系统中已经有太多的进程
     b) 该实际用户id的进程总数已经达到了最大值

vfork
  vfork的函数用于创建一个新进程，而该新进程的目的是exec一个新程序
  vfork和fork的区别和联系
  vfork和fork都会创建一个子进程 但是vfork并不将父进程的地址空间复制到子进程 因为vfork会调用exec或者exit,所以不会引用到复制的内容
   在子进程调用exec或者exit之前它在父进程中执行(所以也保证了vfork出来的子进程先于父进程执行)
   只有当子进程调用了exec或者exit过后父进程才会恢复执行
   如果子进程修改了内存数据，进行函数调用，或者忘了调用exec或者exit就返回都可能会带来未知的结果
   
   简单说 vfork就是在父进程的内存空间中运行，不复制内存空间，先于父进程执行!只有当子进程调用了exec或者exit父进程才会被调度
例子
  1 #include<stdio.h>          
  2 #include<stdlib.h>         
  3 #include<unistd.h>         
  4 
  5 int global = 0;            
  6 
  7 int                        
  8 main( int argc, char* argv[] ) {
  9     int var = 0;
 10     int pid = 0;
 11     printf( "before vfork" );
 12     if ( ( pid = vfork() ) < 0 ) {  
 13         printf( "fork error\n" );       
 14         return 0;
 15     } else if ( pid == 0 ) {
 16         var += 2;
 17         global += 2;
 18         exit(0);
 19     } else {
 20         var += 1;
 21         global += 1;
 22         sleep(3);
            printf("wake up");
 23     }
 24     //不要\n的原因在于 因为是行缓冲的 遇到\n就会刷新缓冲区
 25     //父子进程共享同一个文件表项 所以这里会写到同一个文件中去
 26     printf( "pid:%d var:%d global:%d\n", getpid(), var, global );
 27     return 0;
 28 }
 因为子进程运行在父进程的内存空间中,所以子进程进行了exit调用时 刷新了父进程的缓冲区 然后退出
 所以输出结果如下
 root@instance-u1n6fu49:~/linux/unix_env/process# ./fork 
before vforkwake up
pid:5954 var:3 global:3

exit
  对于父进程已经终止的进程，他们的父进程都改变为init进程。这种处理方法就保证了每个进程都有一个父进程
  在一个进程终止时，内核逐个检查所有活动进程，以判断它是否是正要终止进程的子进程，如果是，则进程的父进程ID就更改为1(init进程)
  为什么要遍历所有活动的进程 那是因为一个进程的子进程可能有多个 并且目前没有一个函数能够获得其所有子进程的进程ID 所以在进程结束过程中，内核才回去逐个检查所有活动进程
  
  父进程可以通过wait或者waitpid()获得进程的退出信息
  wait和waitpid的区别 wait只要任意子进程状态发生了改变都会返回
  waitpid只有当指定进程发生状态时才会返回
  
  一个进程关闭时 内核可以可以释放终止进程所使用的所有存储区,关闭其所有打开文件
  
  僵尸进程
    一个已经终止 但是其父进程尚未对其进行善后处理(获取它的退出信息，释放它仍占用的资源)的进程就被称为僵尸进程,这也是为什么要把所有的孤儿进程的父进程改成init进程
    
wait和waitpid
  pid_t wait( int* statloc );
  pid_t waitpid( pid_t pid, int* statloc, int options )
  当一个进程正常或者异常终止时,内核就向其父进程发送SIGCHLD信号，因为子进程终止时一个异步事件(这可以在父进程运行的任何时候发生)，所以这种信号也是内核向父进程发的异步通知
  父进程可以选择忽略(默认处理是忽略)该信号,也可以提供一个信号处理函数
  
  wait和waitpid的执行
  a) 如果所有子进程都还在运行 则阻塞
  b) 如果一个子进程已终止,正等待父进程取其终止状态，则立即取得该子进程的终止状态并返回
  c) 如果它没有任何子进程则立即出错返回
  返回终止子进程的进程ID
  
  如果说收到了SIGCHLD信号调用wait那么wait会立即返回 如果是随机调用wait wait就可能会被阻塞 直到有子进程终止
  statloc指针如果不为空，则进程的终止状态就放在statloc指针所指向的内存区域中
  pid_t waitpid( pid_t pid )
  pid == -1 等待任一子进程，此时wait和waitpid等效
  pid > 0 等待ID与pid相等的子进程
  pid == 0 等待组ID等于调用进程ID的人一子进程
  pid < -1 等待组ID等于pid绝对值的任一子进程
  
  wait和waipid的区别
  a) waitpid 可等待一个特定的进程,而wait则返回任一终止子进程的状态
  b) waitpid 提供了一个wait的非阻塞版本。有时希望获取一个子进程的状态，但不想阻塞
  c) waitpid 通过WUNTRACED和WCONTINUED选项支持作业控制
  
waitid函数
  int waitid( idtype_t idtype, id_t id, siginfo *infop, int options );
  waitid与waitpid类似 允许一个进程指定要等待的子进程。但它使用两个单独的参数表示要等待的子进程所属的类型
  idtype
  P_PID 等待一特定的进程: id包含要等待子进程的进程ID
  P_PGID 等待一特定进程组中的任一子进程,id包含要等待子进程的进程组ID
  P_ALL 等待任一子进程忽略id
  
wait3和wait4
  就是返回值多了一个资源的使用情况

进程竞争条件
  那个进程先运行我们无法确定，进程的运行依赖于系统负载和进程的调度算法
  
 
      
      
  
  
  
  
  
  
  
  
