#include<sys/socket.h>
int socket( int domain, int type, int protocol );
//若成返回文件(套接字)描述符; 若出错返回-1
参数 详解:
1) domain(域) 确定通信的特性，包括地址格式，而表示各个域的常熟都以AF_开头 意指地址簇
  AF_LOCAL这是AF_UNIX的别名
  AF_UNSPEC域可以代表"任何域"
  1.1) AF_INET ipv4地址域
  1.2) AF_INET6 ipv6地址域
  1.3) AF_UNIX unix域
  1.4) AF_UNSPEC 未指定
2) type(套接字类型) 进一步确定通信的特征
  2.1) SOCK_DGRAM 固定长度的,无连接的,不可靠的报文传递
  2.2) SOCK_RAM ip协议的数据报接口(在posix.1中为可选)
  2.3) SOCK_SEQPACKET 固定长度的,有序的,可靠的,面向连接的报文传递
  2.4) SOCK_STREAM 有序的,可靠的,双向的,面向连接的字节流
3) protocol(通常为0) 表示为给定的域和和套接字类型选择默认协议
  在AF_INET通信域中,套接字类型SOCK_STREAM的默认协议是传输控制协议(IPPROTO_TCP)
  在AF_INET通信域中,套接字类型SOCK_DGRAM的默认协议是UDP(IPPROTO_UDP)
  IPPROTO_IP  ipv4网际协议
  IPPROTO_IPV6 ipv6网际协议(在posix.1中为可选)
  IPPROTO_ICMP 因特网控制报文报文协议
  IPPROTO_RAW 原始ip数据报协议(在posix.1中为可选)
  IPPROTO_TCP 传输控制协议
  IPPROTO_UDP 用户数据报协议(user datagram protocol)
  
  #include<sys/socket.h>
  套接字通信是双向的。可以采用shutdown函数来禁止一个套接字i/o
  int shutdown( int sockfd, int how );
  参数how
  1) shut_rd关闭读端,那么无法从套接字读数据。
  2) shut_wr关闭写端,那么无法使用套接字发送数据.
  3) shut_rdwr 则既无法读取数据又无法发送数据
  
  有了close还要shutdown的原因
    因为描述符涉及到一个引用计数 close是把计数-1，直到引用计数为0时才会关闭这个套接字。
    
字节序
  为什么需要字节序 因为处理器支持的字节序不同有的是大端字节序 有的是小端字节序
  大端: 最大字节地址出现在最低有效字节上。
  小端: 最低有效字节出现在最小字节地址
  tcp/ip中 有4个用来在处理字节序和网络字节序之间实施转换的函数。
  #include<arpa/inet.h>
  uint32_t htonl( uint32_t hostint32 ); 以网络字节序表示的32位整数
  
  uint16_t htons( uint16_t hostint16 ); 以网络字节序表示的16位整数
  
  uint32_t ntohl( uint32_t netint32 );  以主机子继续表示的32位整数
  
  uint16_t ntohs( uint16_t netint16 );  主机字节序表示的116位整数
  
地址格式
  一个地址标识一个特定通信域的套接字端点,地址格式与这个特定的通信域相关。为使不同格式的地址能够传入到套接字函数,地址会被强制转换成一个通用的地址结构sockaddr;
  
  struct sockaddr {
      sa_family_t         sa_family; //协议地址簇
      char                sa_data[]; //可变长度的地址
  }
  
  套接字实现可以自由的添加额外的成员并且定义sa_data成员的大小 在linux下
  struct sockaddr {
      sa_family_t         sa_family;// 协议地址簇
      char                sa_data[14]; //可变长度的地址
  }
  
  在ipv4 AF_INET中套接字地址用结构 sockaddr_in表示
    struct in_addr {
        in_addr_t             s_addr;   //ipv4 地址 是个长整数
    }
    
    struct sockaddr_in {
        sa_family_t         sin_family; //协议地址簇
        in_port_t           sin_port; //端口地址
        struct in_addr      sin_addr;// ipv4地址
    }
  
 点分十进制和二进制之间的地址转换
 
 int inet_addr( const char* cp ); //将一个点分十进制的ip地址转换为一个以网络字节序的二进制数据
 
 char* inet_ntoa( struct in_addr in ); //将一个网络字节序的二进制地址 转换为一个点分十进制字符串
 
 #include<arpa/inet.h>
 将网络字节序的二进制地址转换成文本字符串格式
 const char* inet_ntop( int domain, const void* restrict addr, char* restrict str, socklen size );
 返回值:若成功, 返回地址字符串指针; 若出错, 返回NULL
 
 将文本字符串格式转换成网络字节序的二进制地址
 int inet_pton( int domain, const char* restrict str, void* restrict addr );
 返回值: 若成功返回1 若格式无效返回0 失败返回-1

套接字选项
    //就是给套接字上增加一些额外的选项
    #include<sys/socket.h>
    int setsockopt( int sockfd, int level, int option, const void* val, socklen_t len );
    
带外数据
    是一些通信协议锁支持的可选功能,与普通数据相比,它允许更高优先级的数据传输。带外数据先行传输,即使传输队列已经有了数据.tcp支持带外数据,但是udp不支持
    tcp又称带外数据为紧急数据,为了产生一个紧急数据可以在3个send函数中的任何一个指定MSG_OOB标志,如果发送带MSG_OOB标志的数据超过一个字节时  最后一个字节被视为带外数据,
    并且接收到了带外数据的进程会产生SIGURG信号。
    可以通过fcntl(sockfd, F_SETOWN, pid)//pid所指向的进程拥有套接字的所有权
    因为tcp只有一个紧急数据 所以在一个紧急数据被处理完之前，又来一个紧急数据则旧的紧急数据会被丢弃
