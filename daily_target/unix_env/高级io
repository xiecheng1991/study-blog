补充知识
修改已经打开的文件描述符属性

#include<fcntl.h>
int fcntl( int fd, int cmd, long arg );
出错返回-1 成功返回某个其他的值

fd已经打开的描述符

cmd代表打算操作的指令
  F_DUPFD用来查找大于或等于参数arg的最小且仍未使用的文件描述符，并且复制参数fd的文件描述符
  F_GETFL获取描述符属性 取得文件描述符状态旗标，此旗标为open（）的参数flags。
  int val = fcntl( STDOUT_FILENO, F_GETFL, 0 ); 
  F_SETFL修改描述符属性 但只允许O_APPEND、O_NONBLOCK和O_ASYNC位的改变，其他位的改变将不受影响。
  val |= O_NONBLOCK
  int err = fcntl( STDOUT_FILENO, F_SETFL, val );
属性 是一个标志位 进行位运算


--记录锁
#include<fcntl.h>
int fcntl(int fd, int cmd, .../*struct flock *flockptr*/ );

struct flock {
    short l_type; //锁的类型 F_RDLOCK(共享读锁) F_WRLOCK(独占性写锁) F_UNLOCK(解锁)
    short l_whence; //要加锁或者解锁的起始偏移量
    off_t l_start; //要加锁或者解锁的起始偏移量
    off_t l_len; //要加锁或者解锁的区域的字节长度
    pid_t l_pid; //进程ID(l_pid)持有锁能够阻塞当前的进程(仅由F_GETLK返回)
}

加锁和解锁区域的补充
  1) 指定区域起始偏移量的两个元素的两个元素与lseek函数中最后两个参数类似.
    l_whence可选用的值是SEEK_SET, SEEK_CUR或者SEEK_END.
  2) 锁可以在当前文件尾端处或者开始处或者越过尾端处开始,但是不能在文件起始位置之前开始。
  3) 如果l_len为0 则表示锁的范围可以扩大到最大可能偏移量
  4) 为了对整个文件加锁,我们设置l_start和l_whence指向文件开始的位置,并且制定长度为0( 常用的方法是l_start指定为0 l_whence指定为seek_set )
  
  记录锁的关系
    任意多个进程在一个给定的字节上可以有一把共享的读锁,但是在一个给定的字节上只能有一个进程有一个把独占写锁。(有点类似线程的同步的读写锁)
    
  fcntl函数的三种命令
  1) F_GETFL 判断第三个参数flockptr所描述的锁是否会被另外一把锁排斥(阻塞)
    如果存在一把锁,它阻止创建由flockptr所描述的锁, 则现有锁的信息将重写flockptr所指向的信息。如果不存在这种情况,则除了将l_type设置为F_UNLOCK之外,flockptr所指向的结构体中的其他信息保持不变
  
  2) F_SETLK 设置由flockptr所描述的锁。如果我们试图获得一把读锁(l_type为 F_RDLCK)或写锁( l_type为F_WRLCK ),如果兼容性规则阻止系统给我们这把锁,那么fcntl会立即出错返回,此时errno设置为EACCESS
  EAGAIN 此命令也用来清除flockptr指定的锁(l_type为F_UNLOCK)
  
  3) F_SETLKW 此命令是F_SETLK的阻塞版本(W表示等待wait) 如果所请求的读锁或者写锁因为另一个进程当前已经对这个区域进行了加锁而不能被授予,那么调用进程会被休眠,如果请求创建的锁变为可用
    或者由休眠信号中断,则进程被唤醒
    
 记录锁的分离和组合
    若第100-199字节是加锁的区域 需要解锁第150字节 则系统就会通过两把锁 把一个连续的区域分割成两段 100-149 151-199
    如果又对150字节加锁了  则会合并成100-199又跟开始一样了
    
 注意 不能测试它自己是否在文件的某一部分持有一把锁。F_GETLK命令的定义说明 返回信息指示是否有现有的锁阻止调用进程设置做自给的锁。因为F_SETLK F_SETLKW命令总是替换调用进程现有的锁
 所以F_GETLK命令决不会报告进程自己持有的锁
 
 死锁
  两个进程相互等待对方持有且不释放的资源时,则这两个进程处于死锁状态
 
 锁的隐含继承与释放
 1) 锁与进程和文件两者相关联。这有两重含义,第一重含义当一个进程终止时,它所建立的锁全部释放;第二重则不太明显 无论一个描述符何时关闭,该进程通过这一描述符引用的文件上的任何一把锁都会被释放
  也就是说进程终止 或者文件描述符被关闭 都会释放掉该进程对该文件的锁
 2) 由fork产生的子进程不继承父进程所设置的锁
 
 
 守护进程概念
    守护进程是一类在后台运行的特殊进程,用于执行特定的系统任务。很多守护进程在系统引导的时候启动,并且一直运行直到系统关闭,另一些只在需要的时候才启动,完成任务后就自动结束
 
 ***********************************************************************************************************************************************
 i/o 多路复用
 
 异步i/o
    核心原理是进程告诉内核 准备好可以进行i/o时，用一个信号通知它
    
 i/o多路转接
    核心原理 先构造一张我们感兴趣的描述符(通常都不止一个)的列表，然后调用一个函数,然后调用一个函数,直到这些描述符中的一个已准备好进行i/o时,该函数才返回
    
 select和pselect
     #include<sys/select.h>
     int select( int maxfdpp1, fd_set * restrict readfds, fd_set *restrict writefds, fd_set * restrict exceptfds, struct timeval *restrict tvptr );
     返回值:准备就绪的描述符数目 若超时 返回0 若出错 返回-1
     
     最后一个参数 tvptr 它指定愿意等待的时间长度,单位为秒和微妙
     1) tvptr == NULL
         永远等待。如果捕捉到一个信号则中断此无限期等待。如果所指定的描述符中的一个已准备好或者捕捉到一个信号则返回。如果捕捉到的是一个信号 则select 返回-1 errno设置为EINTR。
     2) tvptr->tv_sec == 0 && tvptr->tv_usec == 0
         根本不等待.测试所有指定的描述符并立即返回。这是轮询系统找到多个描述符状态而不阻塞select的方法
     3) tvptr->tv_sec != 0 && tvptr->tv_usec != 0
         等待指定的秒数和微妙数,当指定的描述符有一个或者多个准备好或者超时则立即返回,如果超时了都没有一个描述符准备好,则返回值是0
         
     中间的3个参数 是指向描述符集合的指针 也可以是空指针 表示不关心对应的事件
      1) readfds
        可读描述符集合
      2) writefds
        可写描述符集合
      3) excepfds
        异常条件描述符集合
     fd_set结构体类型 是一个很大的字节数组 关心某一位就把某一位置为1

#include<sys/select.h>
int FD_ISSET( int fd, fd_set * fdset );
void FD_CLR( int fd, fd_set * fdset );// 清除某一位
void FD_SET( int fd, fd_set * fdset ); //开启某一位
void FD_ZERO( fd_set* fdset );//将fd_set 变量的所有位设置为0, 在声明了一个描述符集合之后 必须用FD_ZERO将这个描述符集合置为0

从select 返回过后可以用FD_ISSET测试该集合中的一位是否处于打开状态;

select的第一个参数maxfds1的意思是最大文件描述符+1,也可以将第一个参数设置为FD_SETSIZE这是<sys/select.h>中的一个常量(11024)
因为描述符编号从0开始,所以要在最大描述符上+1, 而且设置为最大描述符+1的原因在于 避免浪费时间去检查后面没有使用到的描述符

select返回值的3种情况
  1) 返回-1 表示出错
  2) 返回0 表示没有描述符准备好,这个一般都发生在有等待时间的情况下
  3) 返回 >0的数 表示已准备好的描述符数量
 
对于准备好的含义
  1) 若对读集(readfds)中的一个描述符进行read操作不会阻塞
  2）若对写集(writefds)中的一个描述符进行write操作不会阻塞
  3) 若对异常条件集(exceptfds)中的一个描述符有一个未决异常条件
对于普通文件的描述符,读 写和异常条件总是准备好了的

对于一个描述符阻塞与否 并不影响select是否则色

如果一个描述符上碰到了文件尾端, 则select会认为该描述符是可读的 然后调用read 返回0,这是unix系统指示到达文件尾端的方法,也是判断套接字描述符对方是否关闭的依据


select的变体 pselect
int pselect( int maxfd1, fd_set *restrict readfds, fd_set *restrict writefds, fd_set *restrict exceptfds, const struct timespec *restrict tsptr, const sigset_t *restrict sigmask);

与select的区别如下
1) select的超时值用timeval结构(秒和微妙)指定,但pselect使用timespec结构(秒和纳秒)，如果平台支持这样的精度就能提供更加精准的超时时间
2) pselect超时值 被设置为const 这样保证了调用pselect不会改变此值
3) pselect 可使用可选信号屏蔽字。若sigmask为NULL就和select相同,否则的话屏蔽该信号集指向的信号, 在返回时恢复以前的信号屏蔽字 

 ***********************************************************************************************************************************************
 
 
 poll
 与select类似 不过 它是把三个集合合并了一个集合,构建一个pollfd结构的数组,每个数组元素指定一个描述符编号以及我们感兴趣的事件
 
 #include<poll.h>
 int poll( struct pollfd fdarray[], nfds_t nfds, int timeout );
 返回值: 准备就绪的描述符数目, 若超时返回0 若出错 返回-1
 struct pollfd {
    int fd;     //描述符编号
    short events; //关心的事件
    short revents; //产生的事件
 }
 
 每个元素应该设置为events成员设置为如下几个值的一个或几个
 POLLIN     可以不阻塞的读高优先级以外的数据
 POLLRDNORM 可以不阻塞的读普通数据
 POLLRDBAND 可以不阻塞的读优先级数据
 POLLPRI    可以不阻塞的读高优先级数据
 
 POLLOUT    可以不阻塞的写普通数据
 POLLWRNORM 与PPOLLOUT相同
 POLLWRBAND 可以不阻塞的写优先级数据
 
 POLLERR    已出错
 POLLHUP    已挂断
 POLLNVAL   描述符没有引用一个打开文件
 
 当一个描述符被挂断(POLLHUP)后就不能再写该描述符 但是可以从描述符读到数据
 
最后一个timeout参数指定我们愿意等多长时间
1) timeout == -1 永远等待
2) timeout == 0 不等待 类似轮询
3) timeout > 0 等待timeout毫秒


 
